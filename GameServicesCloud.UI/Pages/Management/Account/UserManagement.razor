@page "/account/users"

@layout AuthorizedLayout

@inject IUserApi UserApi;
@inject IDialogService DialogService

<PageTitle>User management</PageTitle>

<MudContainer Style="padding: 16px">
    <MudText Typo="Typo.h4" Align="Align.Center">User management</MudText>

    <MudTable ServerData="LoadData" Hover="true" @ref="_table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users</MudText>
            <MudSpacer/>
            <MudTextField T="string" ValueChanged="UpdateSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Claims</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@context.Id</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Claims">@context.Claims.Count</MudTd>
            <MudTd DataLabel="Actions">
                <MudTooltip Text="Manage claims" Placement="Placement.Top">
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="@(() => ManageClaims(context))"/>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private MudTable<User> _table = null!;

    private string? _searchString;

    private async Task ManageClaims(User user) {
        var parameters = new DialogParameters<ClaimsDialog> { { x => x.User, user } };

        var dialog = await DialogService.ShowAsync<ClaimsDialog>($"{user.Email}'s claims", parameters, new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium });

        await dialog.Result;

        await _table.ReloadServerData();
    }

    private async Task<TableData<User>> LoadData(TableState state) {
        var count = await UserApi.Count(_searchString ?? "");

        return new TableData<User> { Items = await UserApi.FindAll(state.Page, state.PageSize, _searchString ?? ""), TotalItems = count };
    }

    private void UpdateSearch(string text) {
        _searchString = text;
        _table.ReloadServerData();
    }

}