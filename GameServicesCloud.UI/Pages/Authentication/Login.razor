@page "/login"
@using GameServicesCloud.UI.Services.Auth
@layout MainLayout
@inject NavigationManager Navigation
@inject AuthStateProvider Auth

<MudContainer MaxWidth="MaxWidth.Medium">
    <EditForm class="form-signin" Model="_loginRequest">
        <DataAnnotationsValidator/>

        <MudText Typo="Typo.h4" Align="Align.Center">Login</MudText>

        <MudCard>
            <MudCardContent>
                @if (!_loading) {
                    @if (!_hasToken) {
                        <MudTextField Label="E-mail" @bind-Value="_loginRequest.Email" AutoFocus="true" For="@(() => _loginRequest.Email)"/>
                    } else {
                        <MudTextField Label="Token" @bind-Value="_loginRequest.LoginToken" AutoFocus="true" For="@(() => _loginRequest.LoginToken)"/>
                    }
                } else {
                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
                }

                @if (!string.IsNullOrEmpty(_error)) {
                    <MudAlert Severity="Severity.Error">@_error</MudAlert>
                }
            </MudCardContent>
            <MudCardActions>
                @if (!_hasToken) {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@OnSubmit">Generate login token</MudButton>
                } else {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@OnSubmit">Login</MudButton>
                }
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudContainer>

@code {
    readonly LoginRequest _loginRequest = new();
    string? _error;
    bool _hasToken;
    bool _loading;

    async Task OnSubmit() {
        _error = null;
        _loading = true;

        try {
            if (!_hasToken) {
                await Auth.GetToken(_loginRequest.Email);
                _hasToken = true;
            } else {
                await Auth.Login(_loginRequest);
                Navigation.NavigateTo("");
            }
        } catch (Exception e) {
            _error = e.Message;
        }

        _loading = false;
    }

}